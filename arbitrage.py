# from betsafe import main as betsafe_df
# from XBet import main as XBet_df
import pandas as pd
import numpy as np

# get the different datasets from the two betting sites
betsafe_df=pd.read_csv("betsafe.csv")
XBet_df=pd.read_csv("1XBet.csv")

# # drop unnecessary autogenerated columns
# betsafe_df.drop(columns=["Unnamed: 0.1"],axis=1,inplace=True)
# XBet_df.drop(columns=["Unnamed: 0.1"],axis=1,inplace=True)

# get the matchnames of both datasets
betsafe_df_indices=np.array(betsafe_df.iloc[:,0])
XBet_df_indices=np.array(XBet_df.iloc[:,0])


# # get the matchnames of both datasets
# betsafe_df_indices=np.array(betsafe_df["Unnamed: 0"])
# XBet_df_indices=np.array(XBet_df["Unnamed: 0"])


print(betsafe_df_indices)

# make the matchnames the indexes
betsafe_df.index=list(range(0,len(betsafe_df_indices),1))

print(betsafe_df)
# print(betsafe_df_indices)
# print(XBet_df_indices)

# drill down the individual arrays into simplified arrays for comparison
new_betsafe_matchArr=[]
new_xbet_matchArr=[]

# stripped arrays 
for matchName in list(betsafe_df_indices):
    match_ARR=matchName.split("vs")
    new_betsafe_matchArr.append(np.array(match_ARR))
for matchNamez in XBet_df_indices:
    match_ARRz=matchNamez.split("vs")
    new_xbet_matchArr.append(np.array(match_ARRz))

# each team name for the XBET
xbetTeamNames=[]
for teams in new_xbet_matchArr:
    for team in teams:
        xbetTeamNames.append(team)

# each teamname for betsafe
betsafeTeamName=np.array(new_betsafe_matchArr).flatten()


def comprehensiveDF():
    # arr for containing which index value has matches in both arrays
    XbetCountDrop=[]
    countArr=[]
    parralelCountArr=[]
    # compare the arrays
    listBetsafe=list(betsafeTeamName)
    for counts,team in enumerate(xbetTeamNames):
        if(team in listBetsafe):
            countArr.append(listBetsafe.index(team))
            parralelCountArr.append(counts)
            print(f"{team} is in {listBetsafe.index(team)} of the betsafe")
        

    print("the various counts")
    print(countArr)
    print(parralelCountArr)
    contigousARR=[]
    parralelcontigousArr=[]
    # the array should take up consecutive numbers
    for count,number in enumerate(countArr):
        if(count == len(countArr)-1):
            break
        else:
            if(count>0):
                if(number+1 == countArr[count+1] or number-1 == countArr[count-1]):
                    contigousARR.append(number)
            elif (count == 0):
                if(number+1 == countArr[count+1]):
                    contigousARR.append(number)

    for count,number in enumerate(parralelCountArr):
        if(count == len(parralelCountArr)-1):
            break
        else:
            if(count>0):
                if(number+1 == parralelCountArr[count+1] or number-1 == parralelCountArr[count-1]):
                    parralelcontigousArr.append(number)
            elif (count == 0):
                if(number+1 == parralelCountArr[count+1]):
                    parralelcontigousArr.append(number)

    print("The contiguous array")
    print(contigousARR)
    print("The Parrallel contiguous is ")
    print(parralelcontigousArr)

    newContiguousArr=[]
    for count,number in enumerate(contigousARR):
        if(countArr[count]%2==0 and countArr[count+1]%2!=0):
            extended=[int(countArr[count]/2),int((countArr[count]/2))+1]
            newContiguousArr.extend(np.array(extended).flatten())
    newParallelContiguous=[]
    for count,number in enumerate(parralelcontigousArr):
        if(parralelCountArr[count]%2==0 and parralelCountArr[count+1]%2!=0):
            extended=[int(parralelCountArr[count]/2),int((parralelCountArr[count]/2))+1]
            newParallelContiguous.extend(np.array(extended).flatten())

    newContiguousArr=list(set(newContiguousArr))
    print(newContiguousArr)
    print("The new parallel contigous")
    newParallelContiguous=list(set(newParallelContiguous))
    print(newParallelContiguous)

    # the very very last array the last indexes are the indexes that are in the 
    lastIndexes=[]
    lastIndexesParallel=[]
    for index in newContiguousArr:
        if(index%2==0):
            lastIndexes.append(index)
    for indexParallel in newParallelContiguous:
        if(indexParallel%2==0):
            lastIndexesParallel.append(indexParallel)

    print("The last Index is")
    print(lastIndexes)
    print("The last Index Parralel is")
    print(lastIndexesParallel)
    print("the new betsafe df is")
    # betsafe_df.to_csv("new_betsafe.csv")
    print(betsafe_df.index)

    for index in list(betsafe_df.index):
        if(index not in lastIndexes):
            betsafe_df.drop(index=index,axis=0,inplace=True)
    for index in list(XBet_df.index):
        if(index not in newContiguousArr):
            XBet_df.drop(index=index,axis=0,inplace=True)

    print("The betsafe df")
    print(betsafe_df)
    print("The XBET df is")
    print(XBet_df)
    betsafe_df.to_csv("betsafe.csv")
    
    # save the comprehensive dataframe in a csv file
    XBet_df.to_csv("newXBet.csv")


  


comprehensiveDF()
def arbitrageCalc():
    XBET_df_new=XBet_df[["Unnamed: 0","1or2","X"]]
    Betsafe_df_new=betsafe_df[["Unnamed: 0","1or2","X"]]
    